/*
 * This file is generated by jOOQ.
 */
package com.moneytransfer.model.tables;


import com.moneytransfer.model.Indexes;
import com.moneytransfer.model.Keys;
import com.moneytransfer.model.tables.records.AccountsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accounts extends TableImpl<AccountsRecord> {

    private static final long serialVersionUID = 842835088;

    /**
     * The reference instance of <code>accounts.accounts</code>
     */
    public static final Accounts ACCOUNTS_ = new Accounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsRecord> getRecordType() {
        return AccountsRecord.class;
    }

    /**
     * The column <code>accounts.accounts.Account_ID</code>.
     */
    public final TableField<AccountsRecord, Integer> ACCOUNT_ID = createField(DSL.name("Account_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>accounts.accounts.Account_Name</code>.
     */
    public final TableField<AccountsRecord, String> ACCOUNT_NAME = createField(DSL.name("Account_Name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>accounts.accounts.CCY</code>.
     */
    public final TableField<AccountsRecord, String> CCY = createField(DSL.name("CCY"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>accounts.accounts.Balance</code>.
     */
    public final TableField<AccountsRecord, Double> BALANCE = createField(DSL.name("Balance"), org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * Create a <code>accounts.accounts</code> table reference
     */
    public Accounts() {
        this(DSL.name("accounts"), null);
    }

    /**
     * Create an aliased <code>accounts.accounts</code> table reference
     */
    public Accounts(String alias) {
        this(DSL.name(alias), ACCOUNTS_);
    }

    /**
     * Create an aliased <code>accounts.accounts</code> table reference
     */
    public Accounts(Name alias) {
        this(alias, ACCOUNTS_);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Accounts(Table<O> child, ForeignKey<O, AccountsRecord> key) {
        super(child, key, ACCOUNTS_);
    }

    @Override
    public Schema getSchema() {
        return com.moneytransfer.model.Accounts.ACCOUNTS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNTS_IDX_ACC, Indexes.ACCOUNTS_PRIMARY);
    }

    @Override
    public Identity<AccountsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNTS_;
    }

    @Override
    public UniqueKey<AccountsRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountsRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsRecord>>asList(Keys.KEY_ACCOUNTS_PRIMARY, Keys.KEY_ACCOUNTS_IDX_ACC);
    }

    @Override
    public Accounts as(String alias) {
        return new Accounts(DSL.name(alias), this);
    }

    @Override
    public Accounts as(Name alias) {
        return new Accounts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(String name) {
        return new Accounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Name name) {
        return new Accounts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
